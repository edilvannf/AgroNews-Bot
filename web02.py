import asyncio
import requests
from bs4 import BeautifulSoup

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes
)
from telegram.helpers import escape_markdown # Importa a fun√ß√£o para escapar caracteres Markdown

# TOKEN do seu bot do Telegram
# Mantenha seu token seguro e n√£o o exponha em ambientes p√∫blicos.
TOKEN = '7571180435:AAHkH8imAm8u0RT2COUy7o4FDua4OgpVQNM'

# --- Comando /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Manipula o comando /start, enviando uma mensagem de boas-vindas
    e um teclado inline com op√ß√µes principais.
    """
    keyboard = [
        [InlineKeyboardButton("üìÑ Sites de not√≠cias", callback_data='noticias')],
        [InlineKeyboardButton("‚ùì Ajuda", callback_data='ajuda')],
        [InlineKeyboardButton("‚ÑπÔ∏è Sobre", callback_data='sobre')],
        [InlineKeyboardButton("‚ùå Sair", callback_data='sair_bot')], # Adicionado bot√£o Sair
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    # Verifica se a atualiza√ß√£o √© de um callback_query ou uma nova mensagem
    if update.callback_query:
        await update.callback_query.edit_message_text("üëã Escolha uma op√ß√£o:", reply_markup=reply_markup)
    else:
        await update.message.reply_text("üëã Escolha uma op√ß√£o:", reply_markup=reply_markup)

# --- Resposta aos bot√µes ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Manipula os cliques nos bot√µes inline, direcionando para a fun√ß√£o apropriada
    com base no callback_data.
    """
    query = update.callback_query
    await query.answer() # Sempre responda ao callback_query para remover o estado de "carregando" do bot√£o

    # Bot√£o para voltar ao menu principal
    back_to_menu_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üîô Voltar ao Menu Principal", callback_data='menu')]])

    if query.data == 'noticias':
        # Exibe as op√ß√µes de sites de not√≠cias
        keyboard = [
            [InlineKeyboardButton("üåæ Globo Rural", callback_data='globorural_select_count')],
            [InlineKeyboardButton("üöú Canal Rural", callback_data='canalrural_select_count')],
            [InlineKeyboardButton("üå± AgroLink", callback_data='agrolink_select_count')],
            [InlineKeyboardButton("üîô Voltar", callback_data='menu')]
        ]
        await query.edit_message_text(
            "Escolha um site para ver as √∫ltimas not√≠cias:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == 'ajuda':
        # Exibe a mensagem de ajuda completa
        help_message = (
            "‚ÑπÔ∏è *Guia de Ajuda do Bot de Not√≠cias Agr√≠colas*\n\n"
            "Este bot foi desenvolvido para te manter atualizado com as √∫ltimas not√≠cias do agroneg√≥cio, "
            "coletando informa√ß√µes dos principais portais\\.\n\n" # Escapado o ponto final
            "*Funcionalidades Principais:*\n"
            "1\\.  *Sites de Not√≠cias:* Selecione esta op√ß√£o para escolher entre os sites dispon√≠veis " # Escapado o ponto final
            "\\(Globo Rural, Canal Rural, AgroLink\\) e ver as not√≠cias mais recentes\\.\n" # Escapados par√™nteses e ponto final
            "2\\.  *Quantidade de Not√≠cias:* Ap√≥s escolher um site, voc√™ poder√° selecionar se deseja " # Escapado o ponto final
            "visualizar 5, 10 ou 15 not√≠cias\\.\n" # Escapado o ponto final
            "3\\.  *Voltar ao Menu Principal:* Ap√≥s visualizar as not√≠cias, um bot√£o aparecer√° para " # Escapado o ponto final
            "retornar ao menu inicial e explorar outras op√ß√µes\\.\n" # Escapado o ponto final
            "4\\.  *Sobre:* Conhe√ßa mais sobre os criadores e o prop√≥sito deste projeto\\.\n" # Escapado o ponto final
            "5\\.  *Sair:* Encerra a sess√£o do bot\\. Voc√™ pode reinici√°\\-lo a qualquer momento com o comando /start\\.\n\n" # Escapados pontos e h√≠fens
            "*Comandos R√°pidos:*\n"
            "‚Ä¢  `/start`: Inicia o bot e exibe o menu principal\\.\n" # Escapado o ponto final
            "‚Ä¢  `/sair`: Desliga o bot\\.\n\n" # Escapado o ponto final
            "Se tiver alguma d√∫vida ou sugest√£o, sinta\\-se √† vontade para explorar as op√ß√µes do menu\\!" # Escapados h√≠fens e ponto final
        )
        await query.edit_message_text(help_message, parse_mode='MarkdownV2', reply_markup=back_to_menu_keyboard)
    elif query.data == 'sobre':
        # Exibe informa√ß√µes sobre o bot
        await query.edit_message_text(
            "ü§ñ Bot criado por Edilvan, Ketlhin e Ana Paula. Este projeto foi desenvolvido como parte da disciplina Projeto Integrador √† Programa√ß√£o, no curso de Big Data no Agroneg√≥cio da UNICENTRO, com o objetivo de aplicar conhecimentos de web scraping, automa√ß√£o e manipula√ß√£o de dados com Python.\n\nFontes: Globo Rural, Canal Rural e AgroLink.",
            reply_markup=back_to_menu_keyboard
        )
    elif query.data == 'menu':
        # Volta para o menu principal
        await start(update, context)
    elif query.data == 'sair_bot':
        # Chama a fun√ß√£o para fechar o bot
        await sair(update, context)

    # --- Sele√ß√£o da quantidade de not√≠cias ---
    elif query.data.endswith('_select_count'):
        site_name_prefix = query.data.replace('_select_count', '')
        keyboard = [
            [InlineKeyboardButton("5 Not√≠cias", callback_data=f'{site_name_prefix}_5')],
            [InlineKeyboardButton("10 Not√≠cias", callback_data=f'{site_name_prefix}_10')],
            [InlineKeyboardButton("15 Not√≠cias", callback_data=f'{site_name_prefix}_15')],
            [InlineKeyboardButton("üîô Voltar", callback_data='noticias')] # Volta para a sele√ß√£o de sites
        ]
        await query.edit_message_text(
            "Quantas not√≠cias voc√™ gostaria de ver?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    # --- Envio das not√≠cias com base na quantidade selecionada ---
    elif query.data.startswith('globorural_'):
        num_articles = int(query.data.split('_')[1])
        await enviar_globorural(query, context, num_articles)
    elif query.data.startswith('canalrural_'):
        num_articles = int(query.data.split('_')[1])
        await enviar_canalrural(query, context, num_articles)
    elif query.data.startswith('agrolink_'):
        num_articles = int(query.data.split('_')[1])
        await enviar_agrolink(query, context, num_articles)

# --- Not√≠cias Globo Rural ---
async def enviar_globorural(query, context, num_articles):
    """
    Busca e envia as √∫ltimas 'num_articles' not√≠cias do Globo Rural.
    """
    try:
        pagina = requests.get('https://globorural.globo.com/ultimas-noticias/')
        pagina.raise_for_status() # Lan√ßa um erro para c√≥digos de status HTTP ruins
        soup = BeautifulSoup(pagina.text, 'html.parser')
        noticias = soup.find_all('div', class_='feed-post-body')

        mensagens = []
        for i, div in enumerate(noticias[:num_articles]): # Limita √†s 'num_articles' primeiras not√≠cias
            h2 = div.find('h2', class_='feed-post-link gui-color-primary gui-color-hover')
            if h2:
                a_tag = h2.find('a')
                if a_tag:
                    texto = escape_markdown(a_tag.text.strip(), version=2) # Escapa o texto
                    link = escape_markdown(a_tag['href'], version=2) # Escapa o link
                    mensagens.append(f'üëâ *{texto}*\nüîó {link}')

        if mensagens:
            # Adiciona o bot√£o "Voltar ao Menu Principal" ap√≥s as not√≠cias
            keyboard = [[InlineKeyboardButton("üîô Voltar ao Menu Principal", callback_data='menu')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f'üì∞ *√öltimas {num_articles} not√≠cias do Globo Rural:*\n\n' + '\n\n'.join(mensagens),
                parse_mode='MarkdownV2', # Usar MarkdownV2 para compatibilidade com escape_markdown
                reply_markup=reply_markup
            )
        else:
            await query.edit_message_text("N√£o foi poss√≠vel encontrar not√≠cias do Globo Rural no momento.")
    except requests.exceptions.RequestException as e:
        print(f"Erro ao acessar Globo Rural: {e}")
        await query.edit_message_text("Ocorreu um erro ao buscar not√≠cias do Globo Rural. Tente novamente mais tarde.")
    except Exception as e:
        print(f"Erro inesperado em enviar_globorural: {e}")
        await query.edit_message_text("Ocorreu um erro inesperado ao processar as not√≠cias do Globo Rural.")

# --- Not√≠cias Canal Rural ---
async def enviar_canalrural(query, context, num_articles):
    """
    Busca e envia as √∫ltimas 'num_articles' not√≠cias do Canal Rural.
    """
    try:
        pagina = requests.get('https://www.canalrural.com.br/ultimas-noticias/')
        pagina.raise_for_status()
        soup = BeautifulSoup(pagina.text, 'html.parser')
        artigos = soup.find_all('article')

        mensagens = []
        for artigo in artigos[:num_articles]: # Limita √†s 'num_articles' primeiras not√≠cias
            link_tag = artigo.find('a', href=True)
            if link_tag and link_tag.text.strip():
                texto = escape_markdown(link_tag.text.strip(), version=2) # Escapa o texto
                link = escape_markdown(link_tag['href'], version=2) # Escapa o link
                mensagens.append(f'üëâ *{texto}*\nüîó {link}')

        if mensagens:
            # Adiciona o bot√£o "Voltar ao Menu Principal" ap√≥s as not√≠cias
            keyboard = [[InlineKeyboardButton("üîô Voltar ao Menu Principal", callback_data='menu')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f'üì∞ *√öltimas {num_articles} not√≠cias do Canal Rural:*\n\n' + '\n\n'.join(mensagens),
                parse_mode='MarkdownV2', # Usar MarkdownV2
                reply_markup=reply_markup
            )
        else:
            await query.edit_message_text("N√£o foi poss√≠vel encontrar not√≠cias do Canal Rural no momento.")
    except requests.exceptions.RequestException as e:
        print(f"Erro ao acessar Canal Rural: {e}")
        await query.edit_message_text("Ocorreu um erro ao buscar not√≠cias do Canal Rural. Tente novamente mais tarde.")
    except Exception as e:
        print(f"Erro inesperado em enviar_canalrural: {e}")
        await query.edit_message_text("Ocorreu um erro inesperado ao processar as not√≠cias do Canal Rural.")

# --- Not√≠cias AgroLink (NOVA FUN√á√ÉO) ---
async def enviar_agrolink(query, context, num_articles):
    """
    Busca e envia as √∫ltimas 'num_articles' not√≠cias do AgroLink.
    """
    try:
        pagina = requests.get('https://www.agrolink.com.br/noticias/')
        pagina.raise_for_status()
        soup = BeautifulSoup(pagina.text, 'html.parser')
        # O seletor CSS para as not√≠cias do AgroLink foi ajustado para ser mais espec√≠fico
        noticias_agrolink = soup.select('a.block-news-main-general-title')

        # Adi√ß√£o: Verifica se o seletor encontrou algum elemento
        if not noticias_agrolink:
            print("Nenhum elemento 'a.block-news-main-general-title' encontrado no AgroLink.")
            await query.edit_message_text("N√£o foi poss√≠vel encontrar not√≠cias do AgroLink com o seletor atual. O site pode ter mudado ou n√£o h√° not√≠cias dispon√≠veis.")
            return # Sai da fun√ß√£o se nada for encontrado

        mensagens = []
        for link_noticia in noticias_agrolink[:num_articles]: # Limita √†s 'num_articles' primeiras not√≠cias
            texto = escape_markdown(link_noticia.get_text(strip=True), version=2) # Escapa o texto
            link = link_noticia['href']
            # O AgroLink usa links relativos, ent√£o precisamos complet√°-los
            if link.startswith('/'):
                link = f'https://www.agrolink.com.br{link}'
            link = escape_markdown(link, version=2) # Escapa o link completo
            mensagens.append(f'üëâ *{texto}*\nüîó {link}')

        if mensagens:
            # Adiciona o bot√£o "Voltar ao Menu Principal" ap√≥s as not√≠cias
            keyboard = [[InlineKeyboardButton("üîô Voltar ao Menu Principal", callback_data='menu')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f'üì∞ *√öltimas {num_articles} not√≠cias do AgroLink:*\n\n' + '\n\n'.join(mensagens),
                parse_mode='MarkdownV2', # Usar MarkdownV2
                reply_markup=reply_markup
            )
        else:
            # Esta condi√ß√£o √© um fallback, caso a lista de mensagens fique vazia por outro motivo
            print("A lista de mensagens do AgroLink ficou vazia ap√≥s o processamento dos elementos encontrados.")
            await query.edit_message_text("N√£o foi poss√≠vel processar as not√≠cias do AgroLink. Tente novamente mais tarde.")
    except requests.exceptions.RequestException as e:
        print(f"Erro ao acessar AgroLink: {e}")
        await query.edit_message_text("Ocorreu um erro ao buscar not√≠cias do AgroLink. Verifique sua conex√£o ou tente novamente mais tarde.")
    except Exception as e:
        print(f"Erro inesperado em enviar_agrolink: {e}")
        await query.edit_message_text("Ocorreu um erro inesperado ao processar as not√≠cias do AgroLink.")

# --- Comando /sair e fun√ß√£o de sa√≠da ---
async def sair(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Fecha o bot de forma graciosa.
    """
    # Verifica se a atualiza√ß√£o √© de um callback_query ou uma nova mensagem
    if update.callback_query:
        await update.callback_query.edit_message_text("üëã At√© logo! O bot ser√° desligado.")
    else:
        await update.message.reply_text("üëã At√© logo! O bot ser√° desligado.")
    # Para o loop de polling do bot
    await context.application.stop()

# --- Inicializa√ß√£o ---
if __name__ == '__main__':
    # Cria a inst√¢ncia da aplica√ß√£o do Telegram
    app = ApplicationBuilder().token(TOKEN).build()

    # Define comandos fixos que aparecer√£o no menu do Telegram
    asyncio.get_event_loop().run_until_complete(
        app.bot.set_my_commands([
            BotCommand("start", "Inicia o bot"),
            BotCommand("sair", "Fecha o bot"), # Adicionado comando /sair
        ])
    )

    # Adiciona os handlers para os comandos e callbacks
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("sair", sair)) # Adicionado handler para o comando /sair
    app.add_handler(CallbackQueryHandler(button_handler))

    print("‚úÖ Bot est√° rodando...")
    # Inicia o bot, buscando por atualiza√ß√µes
    app.run_polling()
